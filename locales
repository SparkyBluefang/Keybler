#!/usr/bin/env python2

# ***** BEGIN LICENSE BLOCK *****
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2011-2012, 2014 Matthew Turnbull <sparky@bluefang-logic.com>. All Rights Reserved.
# 
# ***** END LICENSE BLOCK *****

import sys
import re
import os
import codecs
import magic
import subprocess

mdetect = magic.open(magic.MIME_ENCODING)
mdetect.load()

excludeLocals = ["en-US"]

#
# Read and decode a file. Use the magic module to determin the character encoding.
#
def readFile(filename):
	ftype = mdetect.file(filename)
	print "Reading %s as %s" % (filename, ftype)
	with codecs.open(filename, mode="r", encoding=ftype) as f:
		return f.read();

#
# Write a file as UTF-8.
#
def writeFile(filename, contents):
	print "Writing %s as UTF-8" % (filename)
	with codecs.open(filename, mode="w", encoding="utf-8") as f:
		f.write(contents)

#
# Clean a file. Read it, strip blank lines and comments, then write it.
#
reNewLine     = re.compile(r'''[\r\n]+''', re.U)

rePROPComment = re.compile(r'''^\s*#.*?\s*\n''', re.U | re.M)
rePROPEscapes = re.compile(r'''\\(\\n|'|")''', re.U)
rePROPNewLine = re.compile(r'''\\\\\n''', re.U | re.M)

reDTDComment  = re.compile(r'''^\s*<!--.*?-->\s*\n''', re.U | re.M | re.S)
reDTDEscapes  = re.compile(r'''\\(\\n|'|"|&)''', re.U)
reDTDNewLine  = re.compile(r'''\s*(\\\n|\\n)\s*''', re.U | re.M)

def cleanFile(filename):
	contents = readFile(filename)

	contents = reNewLine.sub("\n", contents)

	if filename.endswith(".dtd"):
		contents = reDTDComment.sub("", contents)
		contents = reDTDEscapes.sub("\\1", contents)
		contents = reDTDNewLine.sub("\n", contents)
	elif filename.endswith(".properties"):
		contents = rePROPComment.sub("", contents)
		contents = rePROPEscapes.sub("\\1", contents)
		contents = rePROPNewLine.sub("\\\n", contents)

	writeFile(filename, contents)

#
# Remove a translation from a file
#
rePROPStringStr = "^\s*%s=.*?\s*\n"
reDTDStringStr = "^\s*<!ENTITY %s \".*?\">\s*\n"
def removeString(filename, tString):
	reStr = None
	if filename.endswith(".dtd"):
		reStr = reDTDStringStr % tString
	elif filename.endswith(".properties"):
		reStr = rePROPStringStr % tString

	if reStr:
		contents = readFile(filename)
		reString = re.compile(reStr, re.U | re.M)
		contents = reString.sub("", contents)
		writeFile(filename, contents)

#
# Walk though the local directory, processing DTD and property files.
#
def processL10N(mode, tFile=None, tString=None):
	for root, dirs, files in os.walk("chrome/locale"):
		if os.path.basename(root) == "locale":
			for exclusion in excludeLocals:
				dirs.remove(exclusion)
			dirs.sort()
			continue;

		print "Locale %s" % os.path.basename(root)

		files.sort()

		if mode == "clean":
			for filename in files:
				cleanFile(os.path.join(root, filename))
		elif mode == "remove":
			for filename in files:
				if filename == tFile:
					removeString(os.path.join(root, filename), tString)

#
# Build and format a locale copyright string
#
def buildAuthLicenseStr(locale, auths, years):
	years = list(set(years))
	years.sort()
	years.append(None)

	yearStr = ""
	yearPrev = None
	yearSeq = False
	for year in years:
		if yearPrev is None:
			yearStr = "%s" % (year)
		elif (yearPrev + 1) != year:
			if yearSeq:
				if year is not None:
					yearStr = "%s-%s, %s" % (yearStr, yearPrev, year)
				else:
					yearStr = "%s-%s" % (yearStr, yearPrev)
			elif year is not None:
				yearStr = "%s, %s" % (yearStr, year)

			yearSeq = False
		else:
			yearSeq = True

		yearPrev = year

	return "%s copyright (C) %s %s. All Rights Reserved." % (locale, yearStr, ", ".join(auths))

#
# Update the locale LICENSE file
#
reSplitProp = re.compile(r"=", re.U)
reSplitAuths = re.compile(r"\s*,\s*", re.U)

def processL10NLicense():
	contributors = []

	locales = os.listdir("chrome/locale")
	locales.sort()

	for locale in locales:
		localePath = "chrome/locale/%s/" % locale

		if locale == "en-US" or not os.path.isdir(localePath):
			continue

		args = ["git", "log", "-p", "--pretty=format:COMMIT %H %ad", "--reverse", "--date=short", "--", localePath]
		proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		(stdout, stderr) = proc.communicate()

		if proc.returncode != 0:
			print "Error getting license history for locale: %s" % locale
			print stderr
			continue

		auths = None
		years = []
		year = None

		stdout = stdout.decode('utf-8')
		for line in stdout.splitlines():
			if line.startswith("COMMIT"):
				if year is not None:
					years.append(year)

				year = int(line.split(" ")[2].split("-")[0])

			elif line.startswith("+translator="):
				if auths is not None:
					contributors.append(buildAuthLicenseStr(locale, auths, years))
					years = []

				authsTmp = reSplitAuths.split(reSplitProp.split(line)[1].strip())
				authsTmp = [x for x in authsTmp if x != "Sparky Bluefang"]
				if len(authsTmp) == 0:
					continue

				auths = authsTmp
				auths.sort()

		years.append(year)
		contributors.append(buildAuthLicenseStr(locale, auths, years))

	license = readFile("chrome/locale/LICENSE.in")
	license = license.replace("%contributors%", "\n".join(contributors))
	writeFile("chrome/locale/LICENSE", license)

if __name__ == "__main__":
	mode = sys.argv[1]
	if mode == "clean":
		processL10N("clean")
	elif mode == "license":
		processL10NLicense()
	elif mode == "remove":
		processL10N("remove", sys.argv[2], sys.argv[3].replace(".", "\\."))
	else:
		print "Unknown option '%s'" % mode

